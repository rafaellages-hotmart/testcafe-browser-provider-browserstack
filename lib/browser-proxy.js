"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = __importDefault(require("http"));
const url_1 = require("url");
const pinkie_1 = __importDefault(require("pinkie"));
module.exports = class BrowserProxy {
    constructor(targetHost, targetPort, { proxyPort, responseDelay } = {}) {
        this.targetHost = targetHost;
        this.targetPort = targetPort;
        this.proxyPort = proxyPort || 0;
        this.responseDelay = responseDelay || 0;
        this.server = http_1.default.createServer((...args) => this._onBrowserRequest(...args));
        this.server.on('connection', socket => socket.unref());
    }
    _onBrowserRequest(req, res) {
        setTimeout(() => {
            const parsedRequestUrl = url_1.parse(req.url);
            const destinationUrl = 'http://' + this.targetHost + ':' + this.targetPort + parsedRequestUrl.path;
            res.statusCode = 302;
            res.setHeader('location', destinationUrl);
            res.end();
        }, this.responseDelay);
    }
    async init() {
        return new pinkie_1.default((resolve, reject) => {
            this.server.listen(this.proxyPort, err => {
                if (err)
                    reject(err);
                else {
                    this.proxyPort = this.server.address().port;
                    resolve();
                }
            });
        });
    }
    dispose() {
        this.server.close();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9icm93c2VyLXByb3h5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDZCQUF3QztBQUN4QyxvREFBNkI7QUFHN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLFlBQVk7SUFDL0IsWUFBYSxVQUFVLEVBQUUsVUFBVSxFQUFFLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDbEUsSUFBSSxDQUFDLFVBQVUsR0FBTSxVQUFVLENBQUM7UUFDaEMsSUFBSSxDQUFDLFVBQVUsR0FBTSxVQUFVLENBQUM7UUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBTyxTQUFTLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxHQUFHLGNBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsaUJBQWlCLENBQUUsR0FBRyxFQUFFLEdBQUc7UUFDdkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNaLE1BQU0sZ0JBQWdCLEdBQUcsV0FBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxNQUFNLGNBQWMsR0FBSyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7WUFFckcsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFFckIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDMUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2QsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixPQUFPLElBQUksZ0JBQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQyxJQUFJLEdBQUc7b0JBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNYO29CQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7b0JBRTVDLE9BQU8sRUFBRSxDQUFDO2lCQUNiO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgcGFyc2UgYXMgcGFyc2VVcmwgfSBmcm9tICd1cmwnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAncGlua2llJztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEJyb3dzZXJQcm94eSB7XG4gICAgY29uc3RydWN0b3IgKHRhcmdldEhvc3QsIHRhcmdldFBvcnQsIHsgcHJveHlQb3J0LCByZXNwb25zZURlbGF5IH0gPSB7fSkge1xuICAgICAgICB0aGlzLnRhcmdldEhvc3QgICAgPSB0YXJnZXRIb3N0O1xuICAgICAgICB0aGlzLnRhcmdldFBvcnQgICAgPSB0YXJnZXRQb3J0O1xuICAgICAgICB0aGlzLnByb3h5UG9ydCAgICAgPSBwcm94eVBvcnQgfHwgMDtcbiAgICAgICAgdGhpcy5yZXNwb25zZURlbGF5ID0gcmVzcG9uc2VEZWxheSB8fCAwO1xuXG4gICAgICAgIHRoaXMuc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoKC4uLmFyZ3MpID0+IHRoaXMuX29uQnJvd3NlclJlcXVlc3QoLi4uYXJncykpO1xuXG4gICAgICAgIHRoaXMuc2VydmVyLm9uKCdjb25uZWN0aW9uJywgc29ja2V0ID0+IHNvY2tldC51bnJlZigpKTtcbiAgICB9XG5cbiAgICBfb25Ccm93c2VyUmVxdWVzdCAocmVxLCByZXMpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRSZXF1ZXN0VXJsID0gcGFyc2VVcmwocmVxLnVybCk7XG4gICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvblVybCAgID0gJ2h0dHA6Ly8nICsgdGhpcy50YXJnZXRIb3N0ICsgJzonICsgdGhpcy50YXJnZXRQb3J0ICsgcGFyc2VkUmVxdWVzdFVybC5wYXRoO1xuXG4gICAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDMwMjtcblxuICAgICAgICAgICAgcmVzLnNldEhlYWRlcignbG9jYXRpb24nLCBkZXN0aW5hdGlvblVybCk7XG4gICAgICAgICAgICByZXMuZW5kKCk7XG4gICAgICAgIH0sIHRoaXMucmVzcG9uc2VEZWxheSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlci5saXN0ZW4odGhpcy5wcm94eVBvcnQsIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHlQb3J0ID0gdGhpcy5zZXJ2ZXIuYWRkcmVzcygpLnBvcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkaXNwb3NlICgpIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG59O1xuIl19