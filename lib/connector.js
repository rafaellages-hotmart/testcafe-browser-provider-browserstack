"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pinkie_1 = __importDefault(require("pinkie"));
const browserstack_local_1 = require("browserstack-local");
const os_family_1 = __importDefault(require("os-family"));
const url_1 = __importDefault(require("url"));
const tmp_1 = __importDefault(require("tmp"));
const PROXY_AUTH_RE = /^([^:]*)(?::(.*))?$/;
const identity = x => x;
const capitalize = str => str[0].toUpperCase() + str.slice(1);
function copyOptions(source, destination, transfromFunc = identity) {
    Object
        .keys(source)
        .forEach(key => source[key] && (destination[transfromFunc(key)] = source[key]));
}
function getProxyOptions(proxyConfig) {
    try {
        var { hostname, port, auth } = url_1.default.parse('http://' + proxyConfig);
        var parsedAuth = auth && auth.match(PROXY_AUTH_RE);
        return {
            host: hostname === 'undefined' ? null : hostname,
            port: port,
            user: parsedAuth && parsedAuth[1],
            pass: parsedAuth && parsedAuth[2]
        };
    }
    catch (e) {
        return {};
    }
}
class BrowserstackConnector {
    constructor(accessKey) {
        this.accessKey = accessKey;
        this.connectorInstance = null;
        this.tempFileName = '';
    }
    _getTempFileName() {
        if (!this.tempFileName) {
            tmp_1.default.setGracefulCleanup();
            this.tempFileName = tmp_1.default.tmpNameSync({ unsafeCleanup: true });
        }
        return this.tempFileName;
    }
    create() {
        return new pinkie_1.default((resolve, reject) => {
            var connector = new browserstack_local_1.Local();
            var parallelRuns = process.env['BROWSERSTACK_PARALLEL_RUNS'];
            var logfile = process.env['BROWSERSTACK_LOGFILE'] || (os_family_1.default.win ? this._getTempFileName() : '/dev/null');
            var verbose = process.env['BROWSERSTACK_VERBOSE'];
            var binarypath = process.env['BROWSERSTACK_BINARY_PATH'];
            var opts = Object.assign(Object.assign(Object.assign(Object.assign({ key: this.accessKey, logfile, forceLocal: !!process.env['BROWSERSTACK_FORCE_LOCAL'], forceProxy: !!process.env['BROWSERSTACK_FORCE_PROXY'], localIdentifier: Date.now() }, parallelRuns ? { parallelRuns } : {}), verbose ? { verbose } : {}), binarypath ? { binarypath } : {}), { 
                //NOTE: additional args use different format
                'enable-logging-for-api': true });
            var proxyOptions = getProxyOptions(process.env['BROWSERSTACK_PROXY']);
            var localProxyOptions = getProxyOptions(process.env['BROWSERSTACK_LOCAL_PROXY']);
            copyOptions(proxyOptions, opts, key => 'proxy' + capitalize(key));
            copyOptions(localProxyOptions, opts, key => 'local-proxy-' + key);
            connector.start(opts, err => {
                if (err) {
                    reject(err);
                    return;
                }
                this.connectorInstance = connector;
                resolve(connector);
            });
        });
    }
    destroy() {
        return new pinkie_1.default((resolve, reject) => {
            this.connectorInstance.stop(err => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    }
}
exports.default = BrowserstackConnector;
//# sourceMappingURL=data:application/json;base64,